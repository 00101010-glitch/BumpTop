// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PhotoFrameSource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PbPhotoFrameSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbPhotoFrameSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRSSPhotoFrameSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRSSPhotoFrameSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbLocalPhotoFrameSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbLocalPhotoFrameSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbFlickrPhotoFrameSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbFlickrPhotoFrameSource_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PhotoFrameSource_2eproto() {
  protobuf_AddDesc_PhotoFrameSource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PhotoFrameSource.proto");
  GOOGLE_CHECK(file != NULL);
  PbPhotoFrameSource_descriptor_ = file->message_type(0);
  static const int PbPhotoFrameSource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhotoFrameSource, current_resource_id_),
  };
  PbPhotoFrameSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbPhotoFrameSource_descriptor_,
      PbPhotoFrameSource::default_instance_,
      PbPhotoFrameSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhotoFrameSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhotoFrameSource, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPhotoFrameSource, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbPhotoFrameSource));
  PbRSSPhotoFrameSource_descriptor_ = file->message_type(1);
  static const int PbRSSPhotoFrameSource_offsets_[1] = {
  };
  PbRSSPhotoFrameSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRSSPhotoFrameSource_descriptor_,
      PbRSSPhotoFrameSource::default_instance_,
      PbRSSPhotoFrameSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRSSPhotoFrameSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRSSPhotoFrameSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRSSPhotoFrameSource));
  PbLocalPhotoFrameSource_descriptor_ = file->message_type(2);
  static const int PbLocalPhotoFrameSource_offsets_[1] = {
  };
  PbLocalPhotoFrameSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbLocalPhotoFrameSource_descriptor_,
      PbLocalPhotoFrameSource::default_instance_,
      PbLocalPhotoFrameSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocalPhotoFrameSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocalPhotoFrameSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbLocalPhotoFrameSource));
  PbFlickrPhotoFrameSource_descriptor_ = file->message_type(3);
  static const int PbFlickrPhotoFrameSource_offsets_[1] = {
  };
  PbFlickrPhotoFrameSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbFlickrPhotoFrameSource_descriptor_,
      PbFlickrPhotoFrameSource::default_instance_,
      PbFlickrPhotoFrameSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFlickrPhotoFrameSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFlickrPhotoFrameSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbFlickrPhotoFrameSource));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PhotoFrameSource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbPhotoFrameSource_descriptor_, &PbPhotoFrameSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRSSPhotoFrameSource_descriptor_, &PbRSSPhotoFrameSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbLocalPhotoFrameSource_descriptor_, &PbLocalPhotoFrameSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbFlickrPhotoFrameSource_descriptor_, &PbFlickrPhotoFrameSource::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PhotoFrameSource_2eproto() {
  delete PbPhotoFrameSource::default_instance_;
  delete PbPhotoFrameSource_reflection_;
  delete PbRSSPhotoFrameSource::default_instance_;
  delete PbRSSPhotoFrameSource_reflection_;
  delete PbLocalPhotoFrameSource::default_instance_;
  delete PbLocalPhotoFrameSource_reflection_;
  delete PbFlickrPhotoFrameSource::default_instance_;
  delete PbFlickrPhotoFrameSource_reflection_;
}

void protobuf_AddDesc_PhotoFrameSource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026PhotoFrameSource.proto\"8\n\022PbPhotoFrame"
    "Source\022\033\n\023current_resource_id\030\001 \001(\t*\005\010d\020"
    "\210\'\"h\n\025PbRSSPhotoFrameSource2(\n\013ext_min_t"
    "ag\022\023.PbPhotoFrameSource\030d \001(\r2%\n\010feed_ur"
    "l\022\023.PbPhotoFrameSource\030e \001(\t\"m\n\027PbLocalP"
    "hotoFrameSource2)\n\013ext_min_tag\022\023.PbPhoto"
    "FrameSource\030\310\001 \001(\r2\'\n\tfile_path\022\023.PbPhot"
    "oFrameSource\030\311\001 \001(\t\"\272\001\n\030PbFlickrPhotoFra"
    "meSource2)\n\013ext_min_tag\022\023.PbPhotoFrameSo"
    "urce\030\254\002 \001(\r2&\n\010group_id\022\023.PbPhotoFrameSo"
    "urce\030\255\002 \001(\t2$\n\006tag_id\022\023.PbPhotoFrameSour"
    "ce\030\256\002 \001(\t2%\n\007user_id\022\023.PbPhotoFrameSourc"
    "e\030\257\002 \001(\t", 488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PhotoFrameSource.proto", &protobuf_RegisterTypes);
  PbPhotoFrameSource::default_instance_ = new PbPhotoFrameSource();
  PbRSSPhotoFrameSource::default_instance_ = new PbRSSPhotoFrameSource();
  PbLocalPhotoFrameSource::default_instance_ = new PbLocalPhotoFrameSource();
  PbFlickrPhotoFrameSource::default_instance_ = new PbFlickrPhotoFrameSource();
  PbPhotoFrameSource::default_instance_->InitAsDefaultInstance();
  PbRSSPhotoFrameSource::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    100, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    101, 9, false, false);
  PbLocalPhotoFrameSource::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    200, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    201, 9, false, false);
  PbFlickrPhotoFrameSource::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    300, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    301, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    302, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PbPhotoFrameSource::default_instance(),
    303, 9, false, false);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PhotoFrameSource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PhotoFrameSource_2eproto {
  StaticDescriptorInitializer_PhotoFrameSource_2eproto() {
    protobuf_AddDesc_PhotoFrameSource_2eproto();
  }
} static_descriptor_initializer_PhotoFrameSource_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PbPhotoFrameSource::kCurrentResourceIdFieldNumber;
#endif  // !_MSC_VER

PbPhotoFrameSource::PbPhotoFrameSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbPhotoFrameSource::InitAsDefaultInstance() {
}

PbPhotoFrameSource::PbPhotoFrameSource(const PbPhotoFrameSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbPhotoFrameSource::SharedCtor() {
  _cached_size_ = 0;
  current_resource_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbPhotoFrameSource::~PbPhotoFrameSource() {
  SharedDtor();
}

void PbPhotoFrameSource::SharedDtor() {
  if (current_resource_id_ != &::google::protobuf::internal::kEmptyString) {
    delete current_resource_id_;
  }
  if (this != default_instance_) {
  }
}

void PbPhotoFrameSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbPhotoFrameSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbPhotoFrameSource_descriptor_;
}

const PbPhotoFrameSource& PbPhotoFrameSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoFrameSource_2eproto();  return *default_instance_;
}

PbPhotoFrameSource* PbPhotoFrameSource::default_instance_ = NULL;

PbPhotoFrameSource* PbPhotoFrameSource::New() const {
  return new PbPhotoFrameSource;
}

void PbPhotoFrameSource::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_current_resource_id()) {
      if (current_resource_id_ != &::google::protobuf::internal::kEmptyString) {
        current_resource_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbPhotoFrameSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string current_resource_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_resource_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->current_resource_id().data(), this->current_resource_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 40000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbPhotoFrameSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string current_resource_id = 1;
  if (has_current_resource_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_resource_id().data(), this->current_resource_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->current_resource_id(), output);
  }
  
  // Extension range [100, 5000)
  _extensions_.SerializeWithCachedSizes(
      100, 5000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbPhotoFrameSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string current_resource_id = 1;
  if (has_current_resource_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_resource_id().data(), this->current_resource_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->current_resource_id(), target);
  }
  
  // Extension range [100, 5000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 5000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbPhotoFrameSource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string current_resource_id = 1;
    if (has_current_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_resource_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbPhotoFrameSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbPhotoFrameSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbPhotoFrameSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbPhotoFrameSource::MergeFrom(const PbPhotoFrameSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_resource_id()) {
      set_current_resource_id(from.current_resource_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbPhotoFrameSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbPhotoFrameSource::CopyFrom(const PbPhotoFrameSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbPhotoFrameSource::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PbPhotoFrameSource::Swap(PbPhotoFrameSource* other) {
  if (other != this) {
    std::swap(current_resource_id_, other->current_resource_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PbPhotoFrameSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbPhotoFrameSource_descriptor_;
  metadata.reflection = PbPhotoFrameSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PbRSSPhotoFrameSource::kExtMinTagFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  PbRSSPhotoFrameSource::ext_min_tag(kExtMinTagFieldNumber, 0u);
const ::std::string PbRSSPhotoFrameSource_feed_url_default("");
#ifndef _MSC_VER
const int PbRSSPhotoFrameSource::kFeedUrlFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  PbRSSPhotoFrameSource::feed_url(kFeedUrlFieldNumber, PbRSSPhotoFrameSource_feed_url_default);
PbRSSPhotoFrameSource::PbRSSPhotoFrameSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbRSSPhotoFrameSource::InitAsDefaultInstance() {
}

PbRSSPhotoFrameSource::PbRSSPhotoFrameSource(const PbRSSPhotoFrameSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbRSSPhotoFrameSource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRSSPhotoFrameSource::~PbRSSPhotoFrameSource() {
  SharedDtor();
}

void PbRSSPhotoFrameSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRSSPhotoFrameSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRSSPhotoFrameSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRSSPhotoFrameSource_descriptor_;
}

const PbRSSPhotoFrameSource& PbRSSPhotoFrameSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoFrameSource_2eproto();  return *default_instance_;
}

PbRSSPhotoFrameSource* PbRSSPhotoFrameSource::default_instance_ = NULL;

PbRSSPhotoFrameSource* PbRSSPhotoFrameSource::New() const {
  return new PbRSSPhotoFrameSource;
}

void PbRSSPhotoFrameSource::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRSSPhotoFrameSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PbRSSPhotoFrameSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbRSSPhotoFrameSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbRSSPhotoFrameSource::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRSSPhotoFrameSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRSSPhotoFrameSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRSSPhotoFrameSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRSSPhotoFrameSource::MergeFrom(const PbRSSPhotoFrameSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRSSPhotoFrameSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRSSPhotoFrameSource::CopyFrom(const PbRSSPhotoFrameSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRSSPhotoFrameSource::IsInitialized() const {
  
  return true;
}

void PbRSSPhotoFrameSource::Swap(PbRSSPhotoFrameSource* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRSSPhotoFrameSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRSSPhotoFrameSource_descriptor_;
  metadata.reflection = PbRSSPhotoFrameSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PbLocalPhotoFrameSource::kExtMinTagFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  PbLocalPhotoFrameSource::ext_min_tag(kExtMinTagFieldNumber, 0u);
const ::std::string PbLocalPhotoFrameSource_file_path_default("");
#ifndef _MSC_VER
const int PbLocalPhotoFrameSource::kFilePathFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  PbLocalPhotoFrameSource::file_path(kFilePathFieldNumber, PbLocalPhotoFrameSource_file_path_default);
PbLocalPhotoFrameSource::PbLocalPhotoFrameSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbLocalPhotoFrameSource::InitAsDefaultInstance() {
}

PbLocalPhotoFrameSource::PbLocalPhotoFrameSource(const PbLocalPhotoFrameSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbLocalPhotoFrameSource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbLocalPhotoFrameSource::~PbLocalPhotoFrameSource() {
  SharedDtor();
}

void PbLocalPhotoFrameSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbLocalPhotoFrameSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbLocalPhotoFrameSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbLocalPhotoFrameSource_descriptor_;
}

const PbLocalPhotoFrameSource& PbLocalPhotoFrameSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoFrameSource_2eproto();  return *default_instance_;
}

PbLocalPhotoFrameSource* PbLocalPhotoFrameSource::default_instance_ = NULL;

PbLocalPhotoFrameSource* PbLocalPhotoFrameSource::New() const {
  return new PbLocalPhotoFrameSource;
}

void PbLocalPhotoFrameSource::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbLocalPhotoFrameSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PbLocalPhotoFrameSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbLocalPhotoFrameSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbLocalPhotoFrameSource::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbLocalPhotoFrameSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbLocalPhotoFrameSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbLocalPhotoFrameSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbLocalPhotoFrameSource::MergeFrom(const PbLocalPhotoFrameSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbLocalPhotoFrameSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbLocalPhotoFrameSource::CopyFrom(const PbLocalPhotoFrameSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbLocalPhotoFrameSource::IsInitialized() const {
  
  return true;
}

void PbLocalPhotoFrameSource::Swap(PbLocalPhotoFrameSource* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbLocalPhotoFrameSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbLocalPhotoFrameSource_descriptor_;
  metadata.reflection = PbLocalPhotoFrameSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PbFlickrPhotoFrameSource::kExtMinTagFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  PbFlickrPhotoFrameSource::ext_min_tag(kExtMinTagFieldNumber, 0u);
const ::std::string PbFlickrPhotoFrameSource_group_id_default("");
#ifndef _MSC_VER
const int PbFlickrPhotoFrameSource::kGroupIdFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  PbFlickrPhotoFrameSource::group_id(kGroupIdFieldNumber, PbFlickrPhotoFrameSource_group_id_default);
const ::std::string PbFlickrPhotoFrameSource_tag_id_default("");
#ifndef _MSC_VER
const int PbFlickrPhotoFrameSource::kTagIdFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  PbFlickrPhotoFrameSource::tag_id(kTagIdFieldNumber, PbFlickrPhotoFrameSource_tag_id_default);
const ::std::string PbFlickrPhotoFrameSource_user_id_default("");
#ifndef _MSC_VER
const int PbFlickrPhotoFrameSource::kUserIdFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::PbPhotoFrameSource,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  PbFlickrPhotoFrameSource::user_id(kUserIdFieldNumber, PbFlickrPhotoFrameSource_user_id_default);
PbFlickrPhotoFrameSource::PbFlickrPhotoFrameSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbFlickrPhotoFrameSource::InitAsDefaultInstance() {
}

PbFlickrPhotoFrameSource::PbFlickrPhotoFrameSource(const PbFlickrPhotoFrameSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbFlickrPhotoFrameSource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbFlickrPhotoFrameSource::~PbFlickrPhotoFrameSource() {
  SharedDtor();
}

void PbFlickrPhotoFrameSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbFlickrPhotoFrameSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFlickrPhotoFrameSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbFlickrPhotoFrameSource_descriptor_;
}

const PbFlickrPhotoFrameSource& PbFlickrPhotoFrameSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoFrameSource_2eproto();  return *default_instance_;
}

PbFlickrPhotoFrameSource* PbFlickrPhotoFrameSource::default_instance_ = NULL;

PbFlickrPhotoFrameSource* PbFlickrPhotoFrameSource::New() const {
  return new PbFlickrPhotoFrameSource;
}

void PbFlickrPhotoFrameSource::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbFlickrPhotoFrameSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PbFlickrPhotoFrameSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbFlickrPhotoFrameSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbFlickrPhotoFrameSource::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFlickrPhotoFrameSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbFlickrPhotoFrameSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbFlickrPhotoFrameSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbFlickrPhotoFrameSource::MergeFrom(const PbFlickrPhotoFrameSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbFlickrPhotoFrameSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFlickrPhotoFrameSource::CopyFrom(const PbFlickrPhotoFrameSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFlickrPhotoFrameSource::IsInitialized() const {
  
  return true;
}

void PbFlickrPhotoFrameSource::Swap(PbFlickrPhotoFrameSource* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbFlickrPhotoFrameSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbFlickrPhotoFrameSource_descriptor_;
  metadata.reflection = PbFlickrPhotoFrameSource_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
