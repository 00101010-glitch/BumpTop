// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Nx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PbVec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbVec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbQuat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbQuat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbMat34_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMat34_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbPoseDims_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbPoseDims_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Nx_2eproto() {
  protobuf_AddDesc_Nx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Nx.proto");
  GOOGLE_CHECK(file != NULL);
  PbVec3_descriptor_ = file->message_type(0);
  static const int PbVec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec3, z_),
  };
  PbVec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbVec3_descriptor_,
      PbVec3::default_instance_,
      PbVec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbVec3));
  PbQuat_descriptor_ = file->message_type(1);
  static const int PbQuat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuat, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuat, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuat, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuat, z_),
  };
  PbQuat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbQuat_descriptor_,
      PbQuat::default_instance_,
      PbQuat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbQuat));
  PbMat34_descriptor_ = file->message_type(2);
  static const int PbMat34_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMat34, quat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMat34, t_),
  };
  PbMat34_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMat34_descriptor_,
      PbMat34::default_instance_,
      PbMat34_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMat34, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMat34, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMat34));
  PbPoseDims_descriptor_ = file->message_type(3);
  static const int PbPoseDims_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPoseDims, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPoseDims, dims_),
  };
  PbPoseDims_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbPoseDims_descriptor_,
      PbPoseDims::default_instance_,
      PbPoseDims_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPoseDims, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPoseDims, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbPoseDims));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Nx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbVec3_descriptor_, &PbVec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbQuat_descriptor_, &PbQuat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMat34_descriptor_, &PbMat34::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbPoseDims_descriptor_, &PbPoseDims::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Nx_2eproto() {
  delete PbVec3::default_instance_;
  delete PbVec3_reflection_;
  delete PbQuat::default_instance_;
  delete PbQuat_reflection_;
  delete PbMat34::default_instance_;
  delete PbMat34_reflection_;
  delete PbPoseDims::default_instance_;
  delete PbPoseDims_reflection_;
}

void protobuf_AddDesc_Nx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010Nx.proto\"2\n\006PbVec3\022\014\n\001x\030\001 \002(\002:\0010\022\014\n\001y\030"
    "\002 \002(\002:\0010\022\014\n\001z\030\003 \002(\002:\0010\"@\n\006PbQuat\022\014\n\001w\030\001 "
    "\002(\002:\0010\022\014\n\001x\030\002 \002(\002:\0010\022\014\n\001y\030\003 \002(\002:\0010\022\014\n\001z\030"
    "\004 \002(\002:\0010\"4\n\007PbMat34\022\025\n\004quat\030\001 \002(\0132\007.PbQu"
    "at\022\022\n\001t\030\002 \002(\0132\007.PbVec3\";\n\nPbPoseDims\022\026\n\004"
    "pose\030\001 \001(\0132\010.PbMat34\022\025\n\004dims\030\002 \001(\0132\007.PbV"
    "ec3", 243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Nx.proto", &protobuf_RegisterTypes);
  PbVec3::default_instance_ = new PbVec3();
  PbQuat::default_instance_ = new PbQuat();
  PbMat34::default_instance_ = new PbMat34();
  PbPoseDims::default_instance_ = new PbPoseDims();
  PbVec3::default_instance_->InitAsDefaultInstance();
  PbQuat::default_instance_->InitAsDefaultInstance();
  PbMat34::default_instance_->InitAsDefaultInstance();
  PbPoseDims::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Nx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Nx_2eproto {
  StaticDescriptorInitializer_Nx_2eproto() {
    protobuf_AddDesc_Nx_2eproto();
  }
} static_descriptor_initializer_Nx_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PbVec3::kXFieldNumber;
const int PbVec3::kYFieldNumber;
const int PbVec3::kZFieldNumber;
#endif  // !_MSC_VER

PbVec3::PbVec3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbVec3::InitAsDefaultInstance() {
}

PbVec3::PbVec3(const PbVec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbVec3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbVec3::~PbVec3() {
  SharedDtor();
}

void PbVec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbVec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbVec3_descriptor_;
}

const PbVec3& PbVec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Nx_2eproto();  return *default_instance_;
}

PbVec3* PbVec3::default_instance_ = NULL;

PbVec3* PbVec3::New() const {
  return new PbVec3;
}

void PbVec3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbVec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbVec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbVec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbVec3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbVec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbVec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbVec3::MergeFrom(const PbVec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbVec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVec3::CopyFrom(const PbVec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVec3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PbVec3::Swap(PbVec3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbVec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbVec3_descriptor_;
  metadata.reflection = PbVec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbQuat::kWFieldNumber;
const int PbQuat::kXFieldNumber;
const int PbQuat::kYFieldNumber;
const int PbQuat::kZFieldNumber;
#endif  // !_MSC_VER

PbQuat::PbQuat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbQuat::InitAsDefaultInstance() {
}

PbQuat::PbQuat(const PbQuat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbQuat::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbQuat::~PbQuat() {
  SharedDtor();
}

void PbQuat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbQuat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbQuat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbQuat_descriptor_;
}

const PbQuat& PbQuat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Nx_2eproto();  return *default_instance_;
}

PbQuat* PbQuat::default_instance_ = NULL;

PbQuat* PbQuat::New() const {
  return new PbQuat;
}

void PbQuat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    w_ = 0;
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbQuat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float w = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // required float x = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // required float y = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }
      
      // required float z = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbQuat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float w = 1 [default = 0];
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->w(), output);
  }
  
  // required float x = 2 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // required float y = 3 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  // required float z = 4 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbQuat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float w = 1 [default = 0];
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->w(), target);
  }
  
  // required float x = 2 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }
  
  // required float y = 3 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }
  
  // required float z = 4 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbQuat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float w = 1 [default = 0];
    if (has_w()) {
      total_size += 1 + 4;
    }
    
    // required float x = 2 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 3 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 4 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbQuat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbQuat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbQuat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbQuat::MergeFrom(const PbQuat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbQuat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbQuat::CopyFrom(const PbQuat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbQuat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PbQuat::Swap(PbQuat* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbQuat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbQuat_descriptor_;
  metadata.reflection = PbQuat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMat34::kQuatFieldNumber;
const int PbMat34::kTFieldNumber;
#endif  // !_MSC_VER

PbMat34::PbMat34()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbMat34::InitAsDefaultInstance() {
  quat_ = const_cast< ::PbQuat*>(&::PbQuat::default_instance());
  t_ = const_cast< ::PbVec3*>(&::PbVec3::default_instance());
}

PbMat34::PbMat34(const PbMat34& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbMat34::SharedCtor() {
  _cached_size_ = 0;
  quat_ = NULL;
  t_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMat34::~PbMat34() {
  SharedDtor();
}

void PbMat34::SharedDtor() {
  if (this != default_instance_) {
    delete quat_;
    delete t_;
  }
}

void PbMat34::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMat34::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMat34_descriptor_;
}

const PbMat34& PbMat34::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Nx_2eproto();  return *default_instance_;
}

PbMat34* PbMat34::default_instance_ = NULL;

PbMat34* PbMat34::New() const {
  return new PbMat34;
}

void PbMat34::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quat()) {
      if (quat_ != NULL) quat_->::PbQuat::Clear();
    }
    if (has_t()) {
      if (t_ != NULL) t_->::PbVec3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMat34::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbQuat quat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_t;
        break;
      }
      
      // required .PbVec3 t = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbMat34::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PbQuat quat = 1;
  if (has_quat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quat(), output);
  }
  
  // required .PbVec3 t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->t(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbMat34::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PbQuat quat = 1;
  if (has_quat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quat(), target);
  }
  
  // required .PbVec3 t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->t(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbMat34::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbQuat quat = 1;
    if (has_quat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quat());
    }
    
    // required .PbVec3 t = 2;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMat34::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMat34* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMat34*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMat34::MergeFrom(const PbMat34& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quat()) {
      mutable_quat()->::PbQuat::MergeFrom(from.quat());
    }
    if (from.has_t()) {
      mutable_t()->::PbVec3::MergeFrom(from.t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMat34::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMat34::CopyFrom(const PbMat34& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMat34::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_quat()) {
    if (!this->quat().IsInitialized()) return false;
  }
  if (has_t()) {
    if (!this->t().IsInitialized()) return false;
  }
  return true;
}

void PbMat34::Swap(PbMat34* other) {
  if (other != this) {
    std::swap(quat_, other->quat_);
    std::swap(t_, other->t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMat34::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMat34_descriptor_;
  metadata.reflection = PbMat34_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbPoseDims::kPoseFieldNumber;
const int PbPoseDims::kDimsFieldNumber;
#endif  // !_MSC_VER

PbPoseDims::PbPoseDims()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbPoseDims::InitAsDefaultInstance() {
  pose_ = const_cast< ::PbMat34*>(&::PbMat34::default_instance());
  dims_ = const_cast< ::PbVec3*>(&::PbVec3::default_instance());
}

PbPoseDims::PbPoseDims(const PbPoseDims& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbPoseDims::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  dims_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbPoseDims::~PbPoseDims() {
  SharedDtor();
}

void PbPoseDims::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
    delete dims_;
  }
}

void PbPoseDims::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbPoseDims::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbPoseDims_descriptor_;
}

const PbPoseDims& PbPoseDims::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Nx_2eproto();  return *default_instance_;
}

PbPoseDims* PbPoseDims::default_instance_ = NULL;

PbPoseDims* PbPoseDims::New() const {
  return new PbPoseDims;
}

void PbPoseDims::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pose()) {
      if (pose_ != NULL) pose_->::PbMat34::Clear();
    }
    if (has_dims()) {
      if (dims_ != NULL) dims_->::PbVec3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbPoseDims::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PbMat34 pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dims;
        break;
      }
      
      // optional .PbVec3 dims = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dims:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dims()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbPoseDims::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PbMat34 pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }
  
  // optional .PbVec3 dims = 2;
  if (has_dims()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dims(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbPoseDims::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PbMat34 pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }
  
  // optional .PbVec3 dims = 2;
  if (has_dims()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dims(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbPoseDims::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PbMat34 pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // optional .PbVec3 dims = 2;
    if (has_dims()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dims());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbPoseDims::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbPoseDims* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbPoseDims*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbPoseDims::MergeFrom(const PbPoseDims& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::PbMat34::MergeFrom(from.pose());
    }
    if (from.has_dims()) {
      mutable_dims()->::PbVec3::MergeFrom(from.dims());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbPoseDims::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbPoseDims::CopyFrom(const PbPoseDims& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbPoseDims::IsInitialized() const {
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_dims()) {
    if (!this->dims().IsInitialized()) return false;
  }
  return true;
}

void PbPoseDims::Swap(PbPoseDims* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    std::swap(dims_, other->dims_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbPoseDims::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbPoseDims_descriptor_;
  metadata.reflection = PbPoseDims_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
